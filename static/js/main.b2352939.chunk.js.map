{"version":3,"sources":["components/Track.js","components/Playlist.js","components/RadioSet.js","App.js","serviceWorker.js","index.js"],"names":["Track","_ref","title","artist","playtime","albumart","favorite","toggleFavorite","sendToTop","switchLists","react_default","a","createElement","className","alt","concat","src","type","checked","onChange","onClick","role","aria-label","Playlist","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","calculatePlayTime","tracks","minutes","seconds","forEach","track","times","split","parseInt","Math","floor","hours","padStart","state","index","newState","playlistTracks","setState","splice","unshift","_this2","trackCount","length","trackElements","map","i","components_Track","assign","key","side","Component","RadioSet","components_Playlist","slice","songData","song","id","App","components_RadioSet","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b2352939.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport \"./styles/Track.css\";\n\nconst Track = ({title, artist, playtime, albumart, favorite, toggleFavorite, sendToTop, switchLists}) => {\n  return (\n    <li className=\"track\">\n      <img className=\"track--albumart\" alt={`album art for ${title}`} src={albumart} />\n      <h3 className=\"track--title\">{title}</h3>\n      <input\n        type=\"checkbox\"\n        className=\"track--favorite\"\n        checked={!favorite}\n        onChange={toggleFavorite}\n      />\n      <p className=\"track--artist\">{artist}</p>\n      <p className=\"track--playtime\">{playtime}</p>\n      <button\n        className=\"track--control track--to-top\"\n        onClick={sendToTop}\n        >\n        <span role=\"img\" aria-label=\"send to top\">üîù</span>\n      </button>\n      <button\n        className=\"track--control track--switch\"\n        onClick={switchLists}\n        >\n        <span role=\"img\" aria-label=\"switch lists\">‚Üî</span>\n      </button>\n    </li>\n  );\n};\n\nTrack.propTypes = {\n  title: PropTypes.string,\n  artist: PropTypes.string,\n  playtime: PropTypes.string,\n  albumart: PropTypes.string,\n  favorite: PropTypes.bool,\n  toggleFavorite: PropTypes.func.isRequired,\n  sendToTop: PropTypes.func.isRequired,\n  switchLists: PropTypes.func.isRequired,\n}\n\nexport default Track;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types'\nimport './styles/Playlist.css';\n\nimport Track from './Track';\n\nclass Playlist extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tracks: props.tracks\n    }\n\n  }\n\n  calculatePlayTime = (tracks) => {\n    let minutes = 0;\n    let seconds = 0;\n    tracks.forEach((track) => {\n      const times = track.playtime.split(':');\n      minutes += parseInt(times[0]);\n      seconds += parseInt(times[1]);\n    });\n\n    minutes += Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n\n    seconds %= 60;\n    minutes %= 60;\n\n    seconds = (\"\" + seconds).padStart(2, \"0\");\n    minutes = (\"\" + minutes).padStart(2, \"0\");\n\n    return `${hours}:${minutes}:${seconds}`;\n  }\n\n  toggleFavorite(index) {\n    const newState = this.state;\n    const playlistTracks = newState.tracks;\n    const track = playlistTracks[index];\n\n    track.favorite = !track.favorite;\n\n    playlistTracks[index] = track;\n    newState.tracks = playlistTracks;\n    this.setState(newState);\n  }\n\n  sendToTop(index) {\n    const newState = this.state;\n    const playlistTracks = newState.tracks;\n\n    const track = playlistTracks[index];\n    playlistTracks.splice(index, 1);\n    playlistTracks.unshift(track);\n\n    newState.tracks = playlistTracks;\n    this.setState(newState);\n  }\n\n  render() {\n    const tracks = this.state.tracks;\n    const trackCount = tracks.length;\n    const playtime = this.calculatePlayTime(tracks);\n    const trackElements = tracks.map((track, i) => {\n      return (\n        <Track\n          key={i}\n          {...track}\n          toggleFavorite={() => this.toggleFavorite(i)}\n          sendToTop={() => this.sendToTop(i)}\n        />\n      );\n    });\n\n    return (\n      <div className=\"playlist\">\n        <h2>{this.props.side} Playlist</h2>\n        <p>\n          {trackCount} tracks - {playtime}\n        </p>\n        <ul className=\"playlist--track-list\">\n          {trackElements}\n        </ul>\n      </div>\n    );\n  }\n}\n\nPlaylist.propTypes = {\n  tracks: PropTypes.array,\n  side: PropTypes.string,\n  toggleFavorite: PropTypes.func,\n  sendToTop: PropTypes.func,\n}\n\nexport default Playlist;\n","import React from 'react';\nimport \"./styles/RadioSet.css\";\n\nimport Playlist from './Playlist';\n\nconst RadioSet = (props) => {\n  return (\n    <div className=\"radio-set\">\n      <section className=\"radio-set--playlist-container\">\n        <Playlist\n          side=\"Morning\"\n          tracks={props.tracks.slice(0, props.tracks.length / 2)}\n        />\n        <Playlist\n          side=\"Evening\"\n          tracks={props.tracks.slice(props.tracks.length / 2, props.tracks.length)}\n        />\n      </section>\n    </div>\n  );\n}\n\n\nexport default RadioSet;","import React, { Component } from 'react';\nimport './App.css';\n\nimport RadioSet from './components/RadioSet';\n\nimport songData from './data/tracks.json';\n\nsongData.forEach((song, i) => {\n  song.id = i;\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <h1 className=\"page-header--title\">Radio Lovelace</h1>\n        </header>\n        <main className=\"main\">\n          <RadioSet tracks={songData} />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}